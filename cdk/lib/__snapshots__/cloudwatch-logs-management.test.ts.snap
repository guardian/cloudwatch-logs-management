// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The CloudwatchLogsManagement stack matches the snapshot 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": Object {
    "UseRoleAssumption": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "KinesisStreamRole",
            },
            "",
          ],
        },
      ],
    },
  },
  "Description": "Lambdas to configure Cloudwatch Logs retention times and shipping of logs to ELK",
  "Globals": Object {
    "Function": Object {
      "Environment": Object {
        "Variables": Object {
          "STAGE": Object {
            "Ref": "Stage",
          },
        },
      },
      "Runtime": "nodejs14.x",
    },
  },
  "Parameters": Object {
    "CloudWatchLogsFilterName": Object {
      "Default": "GuLogShippingLambdaFilter",
      "Description": "The name of the filter that should be added/maintained on log groups for shipping to the lambda",
      "Type": "String",
    },
    "DistBucket": Object {
      "Default": "/account/services/artifact.bucket",
      "Description": "The S3 bucket for distributing code in this account",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "KinesisStreamArn": Object {
      "Default": "/account/services/logging.stream",
      "Description": "The ARN (not name) of the kinesis stream to ship logs to",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "KinesisStreamRole": Object {
      "Default": "",
      "Description": "The ARN of the role to assume when writing to the kinesis stream (leaving this empty will mean no role is assumed)",
      "Type": "String",
    },
    "OptionLowerFirstCharOfTags": Object {
      "AllowedValues": Array [
        true,
        false,
      ],
      "Default": true,
      "Description": "Whether to make the first character of tags from lambdas lower case or not (this can help to align tags with other infrastructure in ELK)",
      "Type": "String",
    },
    "RetentionInDays": Object {
      "AllowedValues": Array [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ],
      "Default": 14,
      "Description": "The number of days to set the expiry to on Cloudwatch Logs groups",
      "Type": "Number",
    },
    "ShippingPrefix": Object {
      "Default": "/aws/lambda/",
      "Description": "Comma delimited list of log group prefixes that should be configured to ship to ELK",
      "Type": "CommaDelimitedList",
    },
    "Stack": Object {
      "Description": "The name of this stack, as specified in the riff-raff stacks entry (principly used to aid observability - used to tag functions)",
      "Type": "String",
    },
    "Stage": Object {
      "AllowedValues": Array [
        "CODE",
        "PROD",
      ],
      "Default": "CODE",
      "Description": "Stage name",
      "Type": "String",
    },
  },
  "Resources": Object {
    "KinesisRoleAssumptionPolicy": Object {
      "Condition": "UseRoleAssumption",
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:assumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "KinesisStreamRole",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "SetLogShippingFunc": Object {
      "Properties": Object {
        "CodeUri": Object {
          "Bucket": Object {
            "Ref": "DistBucket",
          },
          "Key": Object {
            "Fn::Sub": Array [
              "\${Stack}/\${Stage}/set-log-shipping/lambda.zip",
              Object {
                "Stage": Object {
                  "Ref": "Stage",
                },
              },
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "LOG_NAME_PREFIXES": Object {
              "Fn::Join": Array [
                ",",
                Object {
                  "Ref": "ShippingPrefix",
                },
              ],
            },
            "LOG_SHIPPING_FILTER_NAME": Object {
              "Ref": "CloudWatchLogsFilterName",
            },
            "LOG_SHIPPING_LAMBDA_ARN": Object {
              "Fn::GetAtt": "ShipLogEntriesFunc.Arn",
            },
            "OPTION_LOWER_FIRST_CHAR_OF_TAGS": Object {
              "Ref": "OptionLowerFirstCharOfTags",
            },
            "STRUCTURED_DATA_BUCKET": Object {
              "Ref": "StructuredFieldsBucket",
            },
          },
        },
        "Events": Object {
          "CheckStatusEvent": Object {
            "Properties": Object {
              "Schedule": "rate(10 minutes)",
            },
            "Type": "Schedule",
          },
        },
        "Handler": "app.setLogShipping",
        "Policies": Array [
          Object {
            "Ref": "SetLogShippingPolicy",
          },
        ],
        "Tags": Object {
          "App": "set-log-shipping",
          "Stack": "cloudwatch-logs-management",
          "Stage": Object {
            "Ref": "Stage",
          },
          "gu:cdk:version": "27.1.0",
          "gu:repo": "guardian/cloudwatch-logs-management",
        },
        "Timeout": 60,
      },
      "Type": "AWS::Serverless::Function",
    },
    "SetLogShippingPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:DescribeLogGroups",
                "logs:DescribeSubscriptionFilters",
                "logs:PutSubscriptionFilter",
                "logs:DeleteSubscriptionFilter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:*",
              },
            },
            Object {
              "Action": Array [
                "lambda:ListFunctions",
                "lambda:ListTags",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "\${StructuredFieldsBucket.Arn}/*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "SetRetentionFunc": Object {
      "Properties": Object {
        "CodeUri": Object {
          "Bucket": Object {
            "Ref": "DistBucket",
          },
          "Key": Object {
            "Fn::Sub": Array [
              "\${Stack}/\${Stage}/set-retention/lambda.zip",
              Object {
                "Stage": Object {
                  "Ref": "Stage",
                },
              },
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "RETENTION_IN_DAYS": Object {
              "Ref": "RetentionInDays",
            },
          },
        },
        "Events": Object {
          "CheckStatusEvent": Object {
            "Properties": Object {
              "Schedule": "rate(1 hour)",
            },
            "Type": "Schedule",
          },
        },
        "Handler": "app.setRetention",
        "Policies": Array [
          Object {
            "Ref": "SetRetentionPolicy",
          },
        ],
        "Tags": Object {
          "App": "set-retention",
          "Stack": "cloudwatch-logs-management",
          "Stage": Object {
            "Ref": "Stage",
          },
          "gu:cdk:version": "27.1.0",
          "gu:repo": "guardian/cloudwatch-logs-management",
        },
        "Timeout": 60,
      },
      "Type": "AWS::Serverless::Function",
    },
    "SetRetentionPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:DescribeLogGroups",
                "logs:PutRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "ShipLogEntriesFunc": Object {
      "Properties": Object {
        "CodeUri": Object {
          "Bucket": Object {
            "Ref": "DistBucket",
          },
          "Key": Object {
            "Fn::Sub": Array [
              "\${Stack}/\${Stage}/ship-log-entries/lambda.zip",
              Object {
                "Stage": Object {
                  "Ref": "Stage",
                },
              },
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "LOG_KINESIS_STREAM": Object {
              "Ref": "KinesisStreamArn",
            },
            "LOG_KINESIS_STREAM_ROLE": Object {
              "Ref": "KinesisStreamRole",
            },
            "STRUCTURED_DATA_BUCKET": Object {
              "Ref": "StructuredFieldsBucket",
            },
          },
        },
        "Handler": "shipLogEntries.shipLogEntries",
        "Policies": Array [
          Object {
            "Ref": "ShipLogEntriesPolicy",
          },
          Object {
            "Fn::If": Array [
              "UseRoleAssumption",
              Object {
                "Ref": "KinesisRoleAssumptionPolicy",
              },
              Object {
                "Ref": "AWS::NoValue",
              },
            ],
          },
        ],
        "Tags": Object {
          "App": "ship-log-entries",
          "Stack": "cloudwatch-logs-management",
          "Stage": Object {
            "Ref": "Stage",
          },
          "gu:cdk:version": "27.1.0",
          "gu:repo": "guardian/cloudwatch-logs-management",
        },
        "Timeout": 5,
      },
      "Type": "AWS::Serverless::Function",
    },
    "ShipLogEntriesPermission": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": "ShipLogEntriesFunc.Arn",
        },
        "Principal": Object {
          "Fn::Sub": "logs.\${AWS::Region}.amazonaws.com",
        },
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ShipLogEntriesPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:PutRecords",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "KinesisStreamArn",
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "\${StructuredFieldsBucket.Arn}/*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "StructuredFieldsBucket": Object {
      "Properties": Object {
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "gu:cdk:version",
            "Value": "27.1.0",
          },
          Object {
            "Key": "gu:repo",
            "Value": "guardian/cloudwatch-logs-management",
          },
          Object {
            "Key": "Stack",
            "Value": "cloudwatch-logs-management",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
    },
  },
  "Transform": "AWS::Serverless-2016-10-31",
}
`;
