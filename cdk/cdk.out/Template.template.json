{
  "Description": "Lambdas to configure Cloudwatch Logs retention times and shipping of logs to ELK",
  "Transform": "AWS::Serverless-2016-10-31",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Stage": {
      "Type": "String",
      "Default": "CODE",
      "AllowedValues": [
        "CODE",
        "PROD"
      ],
      "Description": "Stage name"
    },
    "Stack": {
      "Type": "String",
      "Description": "The name of this stack, as specified in the riff-raff stacks entry (principly used to aid observability - used to tag functions)"
    },
    "RetentionInDays": {
      "Type": "Number",
      "Default": 14,
      "AllowedValues": [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653
      ],
      "Description": "The number of days to set the expiry to on Cloudwatch Logs groups"
    },
    "ShippingPrefix": {
      "Type": "CommaDelimitedList",
      "Default": "/aws/lambda/",
      "Description": "Comma delimited list of log group prefixes that should be configured to ship to ELK"
    },
    "KinesisStreamArn": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/account/services/logging.stream",
      "Description": "The ARN (not name) of the kinesis stream to ship logs to"
    },
    "KinesisStreamRole": {
      "Type": "String",
      "Default": "",
      "Description": "The ARN of the role to assume when writing to the kinesis stream (leaving this empty will mean no role is assumed)"
    },
    "CloudWatchLogsFilterName": {
      "Type": "String",
      "Default": "GuLogShippingLambdaFilter",
      "Description": "The name of the filter that should be added/maintained on log groups for shipping to the lambda"
    },
    "OptionLowerFirstCharOfTags": {
      "Type": "String",
      "Default": true,
      "AllowedValues": [
        true,
        false
      ],
      "Description": "Whether to make the first character of tags from lambdas lower case or not (this can help to align tags with other infrastructure in ELK)"
    },
    "DistBucket": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/account/services/artifact.bucket",
      "Description": "The S3 bucket for distributing code in this account"
    }
  },
  "Globals": {
    "Function": {
      "Runtime": "nodejs14.x",
      "Environment": {
        "Variables": {
          "STAGE": {
            "Ref": "Stage"
          }
        }
      }
    }
  },
  "Conditions": {
    "UseRoleAssumption": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "KinesisStreamRole"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "StructuredFieldsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "27.1.0"
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cloudwatch-logs-management"
          },
          {
            "Key": "Stack",
            "Value": "cloudwatch-logs-management"
          },
          {
            "Key": "Stage",
            "Value": {
              "Ref": "Stage"
            }
          }
        ]
      }
    },
    "SetRetentionPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:DescribeLogGroups",
                "logs:PutRetentionPolicy"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              }
            }
          ]
        }
      }
    },
    "SetRetentionFunc": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket": {
            "Ref": "DistBucket"
          },
          "Key": {
            "Fn::Sub": [
              "${Stack}/${Stage}/set-retention/lambda.zip",
              {
                "Stage": {
                  "Ref": "Stage"
                }
              }
            ]
          }
        },
        "Environment": {
          "Variables": {
            "RETENTION_IN_DAYS": {
              "Ref": "RetentionInDays"
            }
          }
        },
        "Events": {
          "CheckStatusEvent": {
            "Properties": {
              "Schedule": "rate(1 hour)"
            },
            "Type": "Schedule"
          }
        },
        "Handler": "app.setRetention",
        "Policies": [
          {
            "Ref": "SetRetentionPolicy"
          }
        ],
        "Tags": {
          "App": "set-retention",
          "gu:cdk:version": "27.1.0",
          "gu:repo": "guardian/cloudwatch-logs-management",
          "Stack": "cloudwatch-logs-management",
          "Stage": {
            "Ref": "Stage"
          }
        },
        "Timeout": 60
      }
    },
    "SetLogShippingPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:DescribeLogGroups",
                "logs:DescribeSubscriptionFilters",
                "logs:PutSubscriptionFilter",
                "logs:DeleteSubscriptionFilter"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:ListFunctions",
                "lambda:ListTags"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Sub": "${StructuredFieldsBucket.Arn}/*"
              }
            }
          ]
        }
      }
    },
    "ShipLogEntriesPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:PutRecords"
              ],
              "Resource": {
                "Ref": "KinesisStreamArn"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Sub": "${StructuredFieldsBucket.Arn}/*"
              }
            }
          ]
        }
      }
    },
    "KinesisRoleAssumptionPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sts:assumeRole",
              "Resource": {
                "Ref": "KinesisStreamRole"
              }
            }
          ]
        }
      },
      "Condition": "UseRoleAssumption"
    },
    "ShipLogEntriesFunc": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket": {
            "Ref": "DistBucket"
          },
          "Key": {
            "Fn::Sub": [
              "${Stack}/${Stage}/ship-log-entries/lambda.zip",
              {
                "Stage": {
                  "Ref": "Stage"
                }
              }
            ]
          }
        },
        "Environment": {
          "Variables": {
            "LOG_KINESIS_STREAM": {
              "Ref": "KinesisStreamArn"
            },
            "LOG_KINESIS_STREAM_ROLE": {
              "Ref": "KinesisStreamRole"
            },
            "STRUCTURED_DATA_BUCKET": {
              "Ref": "StructuredFieldsBucket"
            }
          }
        },
        "Handler": "shipLogEntries.shipLogEntries",
        "Policies": [
          {
            "Ref": "ShipLogEntriesPolicy"
          },
          {
            "Fn::If": [
              "UseRoleAssumption",
              {
                "Ref": "KinesisRoleAssumptionPolicy"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "Tags": {
          "App": "ship-log-entries",
          "gu:cdk:version": "27.1.0",
          "gu:repo": "guardian/cloudwatch-logs-management",
          "Stack": "cloudwatch-logs-management",
          "Stage": {
            "Ref": "Stage"
          }
        },
        "Timeout": 5
      }
    },
    "SetLogShippingFunc": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket": {
            "Ref": "DistBucket"
          },
          "Key": {
            "Fn::Sub": [
              "${Stack}/${Stage}/set-log-shipping/lambda.zip",
              {
                "Stage": {
                  "Ref": "Stage"
                }
              }
            ]
          }
        },
        "Environment": {
          "Variables": {
            "LOG_SHIPPING_LAMBDA_ARN": {
              "Fn::GetAtt": "ShipLogEntriesFunc.Arn"
            },
            "LOG_NAME_PREFIXES": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "ShippingPrefix"
                }
              ]
            },
            "LOG_SHIPPING_FILTER_NAME": {
              "Ref": "CloudWatchLogsFilterName"
            },
            "STRUCTURED_DATA_BUCKET": {
              "Ref": "StructuredFieldsBucket"
            },
            "OPTION_LOWER_FIRST_CHAR_OF_TAGS": {
              "Ref": "OptionLowerFirstCharOfTags"
            }
          }
        },
        "Events": {
          "CheckStatusEvent": {
            "Properties": {
              "Schedule": "rate(10 minutes)"
            },
            "Type": "Schedule"
          }
        },
        "Handler": "app.setLogShipping",
        "Policies": [
          {
            "Ref": "SetLogShippingPolicy"
          }
        ],
        "Tags": {
          "App": "set-log-shipping",
          "gu:cdk:version": "27.1.0",
          "gu:repo": "guardian/cloudwatch-logs-management",
          "Stack": "cloudwatch-logs-management",
          "Stage": {
            "Ref": "Stage"
          }
        },
        "Timeout": 60
      }
    },
    "ShipLogEntriesPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": "ShipLogEntriesFunc.Arn"
        },
        "Principal": {
          "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
        },
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }
    }
  }
}