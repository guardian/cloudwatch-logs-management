AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambdas to configure Cloudwatch Logs retention times and shipping of logs to ELK

Parameters:
  Stack:
    Type: String
    Description: The name of this stack, as specified in the riff-raff stacks entry (principly used to aid observability - used to tag functions)

  # These lambdas do not like siblings! That is, if more than one instance exists in an account/region then terrible things happen.
  # An `AllowedValues` with a single entry ensures only one version of this template gets deployed via Riff-Raff.
  # Obviously you can manually create another stack, but then you should know the risks you're taking!
  # See https://docs.google.com/document/d/1HNEo6UKQ-JhoXHp0mr-KuGC1Ra_8_BfwSuPq3VgO0AI/edit#
  Stage:
    Type: String
    Description: The stage of this stack (principly used to aid developement and tag functions, should be PROD when in use in an account)
    Default: PROD
    AllowedValues:
      - PROD

  RetentionInDays:
    Type: Number
    Description: The number of days to set the expiry to on Cloudwatch Logs groups
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  ShippingPrefix:
    Type: CommaDelimitedList
    Description: Comma delimited list of log group prefixes that should be configured to ship to ELK
    Default: /aws/lambda/

  KinesisStreamArn:
    Description: The ARN (not name) of the kinesis stream to ship logs to
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/logging.stream

  CloudWatchLogsFilterName:
    Type: String
    Description: The name of the filter that should be added/maintained on log groups for shipping to the lambda
    Default: GuLogShippingLambdaFilter

  DistBucket:
    Description: The S3 bucket for distributing code in this account
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/artifact.bucket

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs16.x
    Environment:
      Variables:
        STAGE: !Ref Stage

Resources:
  StructuredFieldsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SetRetentionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:PutRetentionPolicy
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  SetRetentionFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref DistBucket
        Key: !Sub ${Stack}/${Stage}/set-retention/lambda.zip
      Handler: app.setRetention
      Timeout: 60
      Policies:
      - !Ref SetRetentionPolicy
      Environment:
        Variables:
          RETENTION_IN_DAYS: !Ref RetentionInDays
      Events:
        # call it once an hour
        CheckStatusEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
      Tags:
        Stack: !Ref Stack
        Stage: !Ref Stage
        App: set-retention


  SetLogShippingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:DescribeSubscriptionFilters
              - logs:PutSubscriptionFilter
              - logs:DeleteSubscriptionFilter
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListTags
            Resource: '*'
          - Effect: Allow
            Action:
              - ecs:ListTaskDefinitions
              - ecs:DescribeTaskDefinition
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${StructuredFieldsBucket.Arn}/*

  SetLogShippingFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref DistBucket
        Key: !Sub ${Stack}/${Stage}/set-log-shipping/lambda.zip
      Handler: app.setLogShipping
      Timeout: 60
      Policies:
      - !Ref SetLogShippingPolicy
      Environment:
        Variables:
          LOG_SHIPPING_LAMBDA_ARN: !GetAtt ShipLogEntriesFunc.Arn
          LOG_NAME_PREFIXES: !Join [",", !Ref ShippingPrefix]
          LOG_SHIPPING_FILTER_NAME: !Ref CloudWatchLogsFilterName
          STRUCTURED_DATA_BUCKET: !Ref StructuredFieldsBucket
      Events:
        # Update every 10 mins
        CheckStatusEvent:
          Type: Schedule
          Properties:
            Schedule: rate(10 minutes)
      Tags:
        Stack: !Ref Stack
        Stage: !Ref Stage
        App: set-log-shipping

  ShipLogEntriesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:PutRecords
            Resource: !Ref KinesisStreamArn
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${StructuredFieldsBucket.Arn}/*

  DisableCloudWatchLoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  ShipLogEntriesFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref DistBucket
        Key: !Sub ${Stack}/${Stage}/ship-log-entries/lambda.zip
      Handler: shipLogEntries.shipLogEntries
      Timeout: 5
      Policies:
      # If this lambda accidentally subscribes to its own log group it can create a feedback loop which overwhelms
      # Kinesis and spends huge amounts of $$$ on CloudWatch. There is some code which aims to filter out the relevant
      # log group when creating subscriptions, but we also use this policy to prevent the lambda from sending log events
      # by default, just to be on the safe side.
      # If you need to view logs for debugging purposes, the policy below can be temporarily removed from a specific
      # account using Riff-Raff
      - !Ref DisableCloudWatchLoggingPolicy
      - !Ref ShipLogEntriesPolicy
      Environment:
        Variables:
          LOG_KINESIS_STREAM: !Ref KinesisStreamArn
          STRUCTURED_DATA_BUCKET: !Ref StructuredFieldsBucket
      Tags:
        Stack: !Ref Stack
        Stage: !Ref Stage
        App: ship-log-entries

  # Allow cloudwatch logs to call this function
  ShipLogEntriesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ShipLogEntriesFunc.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
