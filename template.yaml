AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambdas to configure Cloudwatch Logs retention times and shipping of logs to ELK

Parameters:
  Stack:
    Type: String
    Description: The name of this stack (principly used to aid observability - used to tag functions)

  Stage:
    Type: String
    Description: The stage of this stack (principly used to aid developement and tag functions, should be PROD when in use in an account)
    Default: PROD

  RetentionInDays:
    Type: Number
    Description: The number of days to set the expiry to on Cloudwatch Logs groups
    Default: 7
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  ShippingPrefix:
    Type: CommaDelimitedList
    Description: Comma delimited list of log group prefixes that should be configured to ship to ELK
    Default: /aws/lambda/

  KinesisStreamArn:
    Description: The ARN (not name) of the kinesis stream to ship logs to
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/logging.stream

  KinesisStreamRole:
    Description: The ARN of the role to assume when writing to the kinesis stream (leaving this empty will mean no role is assumed)
    Default: "-"
    Type: String

  CloudWatchLogsFilterName:
    Type: String
    Description: The name of the filter that should be added/maintained on log groups for shipping to the lambda
    Default: GuLogShippingLambdaFilter

  OptionLowerFirstCharOfTags:
    Type: String
    Description: Whether to make the first character of tags from lambdas lower case or not (this can help to align tags with other infrastructure in ELK)
    AllowedValues:
    - true
    - false
    Default: true

  DistBucket:
    Description: The S3 bucket for distributing code in this account
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/artifact.bucket

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs8.10
    Environment:
      Variables:
        STAGE: !Ref Stage

Conditions:
  UseRoleAssumption:
    Fn::And:
    - Fn::Not:
      - !Equals [ !Ref KinesisStreamRole, "" ]
    - Fn::Not:
      - !Equals [ !Ref KinesisStreamRole, "-" ]

Resources:
  StructuredFieldsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SetRetentionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - logs:DescribeLogGroups
              - logs:PutRetentionPolicy
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  SetRetentionFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Ref DistBucket
        Key: !Sub ${Stack}/${Stage}/set-retention/lambda.zip
      Handler: app.setRetention
      Timeout: 60
      Policies:
      - !Ref SetRetentionPolicy
      Environment:
        Variables:
          RETENTION_IN_DAYS: !Ref RetentionInDays
      Events:
        LogGroupChangeEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
              - aws.logs
              detail-type:
              - AWS API Call via CloudTrail
              detail:
                eventSource:
                - logs.amazonaws.com
                eventName:
                - CreateLogGroup
        # lets assume that we've missed an event and call it once a day as well
        CheckStatusEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day) 
      Tags:
        Stack: !Ref Stack
        Stage: !Ref Stage
        App: set-retention


  SetLogShippingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - logs:DescribeLogGroups
              - logs:DescribeSubscriptionFilters
              - logs:PutSubscriptionFilter
              - logs:DeleteSubscriptionFilter
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListTags
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${StructuredFieldsBucket.Arn}/*

  SetLogShippingFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref DistBucket
        Key: !Sub ${Stack}/${Stage}/set-log-shipping/lambda.zip
      Handler: app.setLogShipping
      Timeout: 60
      Policies:
      - !Ref SetLogShippingPolicy
      Environment:
        Variables:
          LOG_SHIPPING_LAMBDA_ARN: !GetAtt ShipLogEntriesFunc.Arn
          LOG_NAME_PREFIXES: !Join [",", !Ref ShippingPrefix]
          LOG_SHIPPING_FILTER_NAME: !Ref CloudWatchLogsFilterName
          STRUCTURED_DATA_BUCKET: !Ref StructuredFieldsBucket
          OPTION_LOWER_FIRST_CHAR_OF_TAGS: !Ref OptionLowerFirstCharOfTags
      Events:
        # Trigger whenever a log group is created
        LogGroupChangeEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
              - aws.logs
              detail-type:
              - AWS API Call via CloudTrail
              detail:
                eventSource:
                - logs.amazonaws.com
                eventName:
                - CreateLogGroup
        # tag changes on lambdas can't be triggered this way yet so update every 10 mins anyway
        CheckStatusEvent:
          Type: Schedule
          Properties:
            Schedule: rate(10 minutes)
      Tags:
        Stack: !Ref Stack
        Stage: !Ref Stage
        App: set-log-shipping

  ShipLogEntriesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - kinesis:PutRecords
            Resource: !Ref KinesisStreamArn
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${StructuredFieldsBucket.Arn}/*

  KinesisRoleAssumptionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: UseRoleAssumption
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:assumeRole
            Resource: !Ref KinesisStreamRole

  ShipLogEntriesFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Ref DistBucket
        Key: !Sub ${Stack}/${Stage}/ship-log-entries/lambda.zip
      Handler: shipLogEntries.shipLogEntries
      Timeout: 5
      Policies:
      - !Ref ShipLogEntriesPolicy
      - Fn::If:
        - UseRoleAssumption
        - !Ref KinesisRoleAssumptionPolicy
        - !Ref AWS::NoValue
      Environment:
        Variables:
          LOG_KINESIS_STREAM: !Ref KinesisStreamArn
          LOG_KINESIS_STREAM_ROLE: !Ref KinesisStreamRole
          STRUCTURED_DATA_BUCKET: !Ref StructuredFieldsBucket
      Tags:
        Stack: !Ref Stack
        Stage: !Ref Stage
        App: ship-log-entries

  # Allow cloudwatch logs to call this function
  ShipLogEntriesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ShipLogEntriesFunc.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Ref AWS::AccountId